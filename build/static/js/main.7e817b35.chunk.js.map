{"version":3,"sources":["DatePicker.jsx","Chart2.jsx","Chart3.jsx","Buttons.jsx","NewChart.js","App.js","reportWebVitals.js","index.js"],"names":["moment","extendMoment","originalMoment","Example","props","context","onSelect","value","states","setState","selectDateRange","onToggle","isOpen","state","renderSelectionValue","startDate","endDate","visible","prevState","this","initdate","requestOptions","method","headers","accept","body","JSON","stringify","organization","view","fetch","then","response","json","res","console","log","result","Date","parseInt","catch","err","singleDateRange","minimumDate","maximumDate","initialDate","_d","getDate","initialMonth","getMonth","initialYear","getFullYear","React","Component","Chart2","className","data","chartData2","options","responsive","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","display","xAxes","Chart3","chartData3","Buttons","Button","style","marginLeft","position","top","left","cursor","onClick","window","location","reload","variant","NewChart","data1","chartObject","requestParam","dateRange","chartData1","App","useState","setChartData1","newstartdate","setnewstartdate","newstartdate2","setnewstartdate2","newstartdate3","setnewstartdate3","newenddate","setnewenddate","newenddate2","setnewenddate2","newenddate3","setnewenddate3","setChartData2","setChartData3","bgc","useEffect","chart1body","_id","emailId","orgViewReq","metadata","title","img_thumbnail","chartType","dataLimit","granularity","timeZone","name","toString","xAxis","yAxis","approxCountDistinct","specialCalculation","filter","orderBy","metricOrdByList","id","desc","percentCalList","publisherId","impressions_offered","dataObj","push","labels","datasets","label","backgroundColor","fillColor","strokeColor","highlightFill","highlightStroke","borderWidth","chart1","text","customMetricOrdByList","requestOptions3","cm001","CM001_percent","advertiserId","chart3","requestOptions2","appSiteId","chart4","DatePicker","daterange","end","Math","floor","start","getTime","startdate","enddate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0WAQMA,EAASC,uBAAaC,KA6GbC,E,kDA1Gb,WAAYC,EAAOC,GAAU,IAAD,uBAC1B,cAAMD,EAAOC,IAcfC,SAAW,SAACC,EAAOC,GACjB,EAAKC,SAAS,CAAEF,QAAOC,WACvB,EAAKJ,MAAMM,gBAAgBH,IAjBD,EAoB5BI,SAAW,WACT,EAAKF,SAAS,CAAEG,QAAS,EAAKC,MAAMD,UArBV,EA4B5BE,qBAAuB,WACrB,OACE,yBA3BYd,IAHY,OAK1B,EAAKa,MAAQ,CACXD,QAAQ,EAERG,UAAW,KACXC,QAAS,KACTC,SAAS,EACTV,MAAO,IAXiB,E,+DAuBTW,GACbA,IAAcC,KAAKN,OACrBM,KAAKf,MAAMgB,SAASD,KAAKN,MAAME,UAAWI,KAAKN,MAAMG,W,0CAapC,IAAD,OACZK,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,mBACR,eACE,mqBAGJC,KAAMC,KAAKC,UAAU,CAAEC,aAAc,WAAYC,KAAM,aAEzDC,MAAM,qDAAsDT,GACzDU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAI,cAAeF,EAAIG,OAAOtB,WAEtC,EAAKN,SAAS,CACZM,UAAWf,EAAO,IAAIsC,KAAKC,SAASL,EAAIG,OAAOtB,aAC/CC,QAAShB,EAAO,IAAIsC,KAAKC,SAASL,EAAIG,OAAOrB,gBAGhDwB,OAAM,SAACC,GACNN,QAAQC,IAAIK,Q,+BAKhB,OACE,gCACE,8BAAMtB,KAAKL,yBASe,OAAzBK,KAAKN,MAAME,UACV,cAAC,IAAD,CACER,MAAOY,KAAKN,MAAMN,MAClBD,SAAUa,KAAKb,SACfoC,iBAAiB,EACjBC,YAAaxB,KAAKN,MAAME,UACxB6B,YAAazB,KAAKN,MAAMG,QACxB6B,YAAa1B,KAAKN,MAAME,UAAU+B,GAAGC,UACrCC,aAAc7B,KAAKN,MAAME,UAAU+B,GAAGG,WACtCC,YAAa/B,KAAKN,MAAME,UAAU+B,GAAGK,gBAGvC,U,GA1FYC,IAAMC,W,QCiKbC,G,OAtKA,SAAClD,GAiId,OACE,sBAAKmD,UAAU,MAAf,UACE,2CACA,8BACE,cAAC,MAAD,CACEC,KAAMpD,EAAMqD,WACZC,QAAS,CACPC,YAAY,EAEZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,UAAU,EACVC,cAAe,GACfC,aAAa,GAEfC,UAAW,CACTC,SAAS,KAIfC,MAAO,CACL,CACEF,UAAW,CACTC,SAAS,gBCWdE,G,OAtKA,SAACjE,GAkId,OACE,sBAAKmD,UAAU,MAAf,UACE,2CACA,8BACE,cAAC,MAAD,CACEC,KAAMpD,EAAMkE,WACZZ,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,UAAU,EACVC,cAAe,GACfC,aAAa,GAEfC,UAAW,CACTC,SAAS,KAIfC,MAAO,CACL,CACEF,UAAW,CACTC,SAAS,gB,SC/HdI,MA5Bf,SAAiBnE,GAIf,OACE,mCAOE,cAACoE,EAAA,EAAD,CACEC,MAAO,CACLC,WAAY,GACZC,SAAU,WACVC,KAAM,GACNC,MAAO,GACPC,OAAQ,WAEVC,QAnBN,WACEC,OAAOC,SAASC,QAAO,IAmBnBC,QAAQ,YATV,wB,QC8HSC,EAzIE,SAAChF,GAoGhB,OA9FAiF,EAAMC,YAAYC,aAAaC,UAAUzE,UAAY,gBACrDsE,EAAMC,YAAYC,aAAaC,UAAUxE,QAAU,gBACnDmB,QAAQC,IAAIiD,EAAMC,YAAYC,aAAaC,UAAUzE,WA6FnD,sBAAKwC,UAAU,MAAf,UACE,2CACA,8BACE,cAAC,MAAD,CACEC,KAAMpD,EAAMqF,WACZ/B,QAAS,CACPC,YAAY,EAEZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,UAAU,EACVC,cAAe,GACfC,aAAa,GAEfC,UAAW,CACTC,SAAS,KAIfC,MAAO,CACL,CACEF,UAAW,CACTC,SAAS,eCqRduB,MA9Yf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNF,EADM,KACMG,EADN,OAE2BD,mBAAS,IAFpC,mBAENE,EAFM,KAEQC,EAFR,OAG6BH,mBAAS,IAHtC,mBAGNI,EAHM,KAGSC,EAHT,OAI6BL,mBAAS,IAJtC,mBAINM,EAJM,KAISC,EAJT,OAKuBP,mBAAS,IALhC,mBAKNQ,EALM,KAKMC,EALN,OAMyBT,mBAAS,IANlC,mBAMNU,EANM,KAMOC,EANP,OAOyBX,mBAAS,IAPlC,mBAONY,EAPM,KAOOC,EAPP,OAQuBb,mBAAS,IARhC,mBAQNlC,EARM,KAQMgD,EARN,OASuBd,mBAAS,IAThC,mBASNrB,EATM,KASMoC,EATN,KAWTC,EAAM,CACR,MACA,OACA,QACA,OACA,MACA,OACA,MACA,OACA,QACA,OACA,MACA,OACA,MACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,OACA,MACA,OACA,QACA,OACA,MACA,OACA,MACA,OACA,QACA,OACA,MACA,OACA,MACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,OACA,OACA,QACA,OACA,MACA,QAqSF,OAlDAC,qBAAU,YA9OK,WACb,IAAIC,EAAa,CACf,CACEC,IAAK,yBACLC,QAAS,wBACTC,WAAY,CAAEpF,aAAc,WAAYC,KAAM,WAC9CyD,YAAa,CACX2B,SAAU,CACRC,MAAO,4BACPC,cAAe,mBACfC,UAAW,QACXC,UAAW,IAEb9B,aAAc,CACZ+B,YAAa,OACbC,SAAU,CAAEC,KAAM,eAAgBvC,SAAU,OAC5CO,UAAW,CACTzE,UAAW8E,EAAa4B,WACxBzG,QAASmF,EAAWsB,YAEtBC,MAAO,CAAC,QACRC,MAAO,CAAC,QACRC,oBAAqB,GACrBC,mBAAoB,GACpBC,OAAQ,GACRC,QAAS,CAAEC,gBAAiB,CAAC,CAAEC,GAAI,OAAQC,MAAM,KACjDC,eAAgB,OAMpB9G,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,mBACR,eACE,oqBAGJC,KAAMC,KAAKC,UAAUkF,EAAW,KAG9BuB,EAAc,GACdC,EAAsB,GAE1BvG,MAAM,gDAAiDT,GACpDU,MAAK,SAACC,GAAD,OAAcA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","file":"static/js/main.7e817b35.chunk.js","sourcesContent":["import React from \"react\";\r\n// import DateRangePicker from \"react-daterange-picker\";\r\n// import \"react-daterange-picker/dist/css/react-calendar.css\";\r\nimport originalMoment from \"moment\";\r\nimport DateRangePickerNew from \"react-daterange-picker\";\r\nimport \"react-daterange-picker/dist/css/react-calendar.css\";\r\nimport { extendMoment } from \"moment-range\";\r\n\r\nconst moment = extendMoment(originalMoment);\r\n\r\nclass Example extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    const today = moment();\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n      // value: moment.range(today.clone().subtract(7, \"days\"), today.clone()),\r\n      startDate: null,\r\n      endDate: null,\r\n      visible: false,\r\n      value: \"\",\r\n    };\r\n  }\r\n\r\n  onSelect = (value, states) => {\r\n    this.setState({ value, states });\r\n    this.props.selectDateRange(value);\r\n  };\r\n\r\n  onToggle = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n  componentDidUpdate(prevState) {\r\n    if (prevState !== this.state) {\r\n      this.props.initdate(this.state.startDate, this.state.endDate);\r\n    }\r\n  }\r\n  renderSelectionValue = () => {\r\n    return (\r\n      <div>\r\n        {/* <div>Selection</div> */}\r\n        {/* {this.state.value.start.format(\"YYYY-MM-DD\")} <br />\r\n        {this.state.value.end.format(\"YYYY-MM-DD\")} */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        accept: \"application/json\",\r\n        \"x-auth-token\":\r\n          \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLXBOUUdrN3ljWG45NmpDa1BEQmRoc00yVjhhVnlVZ1B1VFdhdW1PV2FLS01SNzU2YVREbzUxM1BPb2xPVTlCbndUN3pZQk9PZVBDN1c1RXl0VldIb0NRQkgzRHUyeHhUUmk0TGdCUnh3SnhOaHB3PT0iLCJpc3MiOiJyYWh1bGt1bWFyIiwiZXhwIjoxNjEyNjk0NDEyLCJpYXQiOjE2MTI2MDgwMTIsImp0aSI6IjI0ODFjODI4YjhkMGU4MWE0YWE3OGM0ZGFhNDZiZGU4MmRiZjZlZGQ5MjAxMmNiZDBmMGRmYzEwZjJlM2M1NGE3MzE2OTUxYzc4YTllNWMxZjFlMTgxZWM2NmE5YTA3ZDQ2MTNmMDBiMjQwZDg1M2VmNGY3ODU1NDdhZGZjZTc2ZTEwYTkwNzIyM2ZhNTllYmQyYTY1Y2EwZWFkYTliMzBiZGJjMzUzZGY2MzkxYTBmMzQzMzZmMWU2NmJmN2ZmMmMyMzM2OTJjNmMxNzRlN2ZhMmYyMzcyMzdhMzQwYjhmM2YxN2IwYjQyZDA0YzQ2YzliMTQ0MzRhYjAyOTQ3YWYifQ.1DVKkblfARo3AXXHTYBMoaxbopx1_egRADkBTQBEt8g\",\r\n      },\r\n\r\n      body: JSON.stringify({ organization: \"DemoTest\", view: \"Auction\" }),\r\n    };\r\n    fetch(\"https://sigviewauth.sigmoid.io/api/v1/getDateRange\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        console.log(\"date result\", res.result.startDate);\r\n\r\n        this.setState({\r\n          startDate: moment(new Date(parseInt(res.result.startDate))),\r\n          endDate: moment(new Date(parseInt(res.result.endDate))),\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{this.renderSelectionValue()}</div>\r\n\r\n        {/* <div>\r\n          <input\r\n            type=\"button\"\r\n            value=\"Toggle date picker\"\r\n            onClick={this.onToggle}\r\n          />\r\n        </div> */}\r\n        {this.state.startDate !== null ? (\r\n          <DateRangePickerNew\r\n            value={this.state.value}\r\n            onSelect={this.onSelect}\r\n            singleDateRange={false}\r\n            minimumDate={this.state.startDate}\r\n            maximumDate={this.state.endDate}\r\n            initialDate={this.state.startDate._d.getDate()}\r\n            initialMonth={this.state.startDate._d.getMonth()}\r\n            initialYear={this.state.startDate._d.getFullYear()}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {/* {this.state.isOpen && (\r\n          <DateRangePicker\r\n            value={this.state.value}\r\n            onSelect={this.onSelect}\r\n            singleDateRange={true}\r\n            minimumDate={this.state.startDate}\r\n            maximumDate={this.state.endDate}\r\n            initialYear={2017}\r\n          />\r\n        )} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;\r\n","import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport data2 from \"./Data2.json\";\r\nimport \"./App.css\";\r\n\r\nconst Chart2 = (props) => {\r\n  // const [chartData2, setChartData2] = useState({});\r\n\r\n  // const requestOptions2 = {\r\n  //   method: \"POST\",\r\n  //   headers: {\r\n  //     \"Content-Type\": \"application/json\",\r\n  //     accept: \"application/json\",\r\n  //     \"x-auth-token\":\r\n  //       \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLXBxbGJZcVFHNmp2dyszeVZvKzFlS3pJUWl1M00yOXVzM1JzdTZMQUpvMmZ5blEyXC9ES1VWVEVTXC9SanFYZ0cwYzRWRWt3UytDaU95bVR0T1EyTjdtSG5lSTZFek11OVVPTm5KTHdiV3FXU0djMXc9PSIsImlzcyI6InJhaHVsa3VtYXIiLCJleHAiOjE2MTE0NjkxNTMsImlhdCI6MTYxMTM4Mjc1MywianRpIjoiOWU5OWQ3ZGE3OTFhZTdmZDQ5NjdhYjU1ZDcyMWU5YmNkMjMxZWY1OTgyNGZiMjhjYWExOWVkYTNiMDdjMDRiYjU1N2NjMWFjMTRjODI4YTExZGM3YmU5YjhiNWQ2YzE0OThjNDFkNjFjNGUzZTEwYjYyYWM0Mjg0YzJmZDQ0ZWRmMWUwZGY5ODZkMTVhN2NjMTZlYmNlNzhhZmIxMzg4NTc4MzdmYzY5NzYwZjQ1M2ZmZmRkYTM3YWFlNjhhNTEzMmIyZmZmZTQxNGYzZGU0YTY3NWUwM2MyZjk1MmRlNGI5MDdjMmQzZmFiMDgxYTM5NjMyM2I1MWExOTQxN2I0NCJ9.LEVPpRP4XhlL2_Li-VIqETOK3YvyyFhleBBnqwK-X0Y\",\r\n  //   },\r\n\r\n  //   body: JSON.stringify(data2),\r\n  // };\r\n\r\n  // const chart = () => {\r\n  //   let appSiteId = [];\r\n  //   let impressions_offered = [];\r\n\r\n  //   fetch(\"https://sigviewauth.sigmoid.io/api/v1/getData\", requestOptions2)\r\n  //     .then((response) => response.json())\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       for (const dataObj of res.result.data) {\r\n  //         appSiteId.push(dataObj.appSiteId);\r\n  //         impressions_offered.push(parseInt(dataObj.impressions_offered));\r\n  //       }\r\n  //       setChartData2({\r\n  //         labels: appSiteId,\r\n  //         datasets: [\r\n  //           {\r\n  //             label: \"Data Analysis\",\r\n  //             data: impressions_offered,\r\n  //             backgroundColor: [\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //             ],\r\n  //             fillColor: \"rgba(220,220,220,0.5)\",\r\n  //             strokeColor: \"rgba(220,220,220,0.8)\",\r\n  //             highlightFill: \"rgba(220,220,220,0.75)\",\r\n  //             highlightStroke: \"rgba(220,220,220,1)\",\r\n  //             borderWidth: 4,\r\n  //           },\r\n  //         ],\r\n  //       });\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     });\r\n  //   // console.log(\"this is app iste \", appSiteId);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   chart();\r\n  // }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>CHART - 2</h1>\r\n      <div>\r\n        <Bar\r\n          data={props.chartData2}\r\n          options={{\r\n            responsive: true,\r\n            // title: { text: \"THICCNESS SCALE\", display: true },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    autoSkip: true,\r\n                    maxTicksLimit: 10,\r\n                    beginAtZero: true,\r\n                  },\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart2;\r\n","import React, { useState } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport data3 from \"./Data3.json\";\r\n\r\nconst Chart3 = (props) => {\r\n  // const [chartData3, setChartData3] = useState({});\r\n\r\n  // const requestOptions3 = {\r\n  //   method: \"POST\",\r\n  //   headers: {\r\n  //     \"Content-Type\": \"application/json\",\r\n  //     accept: \"application/json\",\r\n  //     \"x-auth-token\":\r\n  //       \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLXBxbGJZcVFHNmp2dyszeVZvKzFlS3pJUWl1M00yOXVzM1JzdTZMQUpvMmZ5blEyXC9ES1VWVEVTXC9SanFYZ0cwYzRWRWt3UytDaU95bVR0T1EyTjdtSG5lSTZFek11OVVPTm5KTHdiV3FXU0djMXc9PSIsImlzcyI6InJhaHVsa3VtYXIiLCJleHAiOjE2MTE0NjkxNTMsImlhdCI6MTYxMTM4Mjc1MywianRpIjoiOWU5OWQ3ZGE3OTFhZTdmZDQ5NjdhYjU1ZDcyMWU5YmNkMjMxZWY1OTgyNGZiMjhjYWExOWVkYTNiMDdjMDRiYjU1N2NjMWFjMTRjODI4YTExZGM3YmU5YjhiNWQ2YzE0OThjNDFkNjFjNGUzZTEwYjYyYWM0Mjg0YzJmZDQ0ZWRmMWUwZGY5ODZkMTVhN2NjMTZlYmNlNzhhZmIxMzg4NTc4MzdmYzY5NzYwZjQ1M2ZmZmRkYTM3YWFlNjhhNTEzMmIyZmZmZTQxNGYzZGU0YTY3NWUwM2MyZjk1MmRlNGI5MDdjMmQzZmFiMDgxYTM5NjMyM2I1MWExOTQxN2I0NCJ9.LEVPpRP4XhlL2_Li-VIqETOK3YvyyFhleBBnqwK-X0Y\",\r\n  //   },\r\n\r\n  //   body: JSON.stringify(data3),\r\n  // };\r\n\r\n  // const chart3 = () => {\r\n  //   let cm001 = [];\r\n  //   let CM001_percent = [];\r\n  //   let advertiserId = [];\r\n\r\n  //   fetch(\"https://sigview.sigmoid.io/api/v1/getData\", requestOptions3)\r\n  //     .then((response) => response.json())\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       for (const dataObj of res.result.data) {\r\n  //         cm001.push(parseInt(dataObj.cm001));\r\n  //         CM001_percent.push(dataObj.CM001_percent);\r\n  //         advertiserId.push(dataObj.advertiserId);\r\n  //       }\r\n  //       setChartData3({\r\n  //         labels: advertiserId,\r\n  //         datasets: [\r\n  //           {\r\n  //             label: \"Data Analysis\",\r\n  //             data: CM001_percent,\r\n  //             backgroundColor: [\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //             ],\r\n  //             fillColor: \"rgba(220,220,220,0.5)\",\r\n  //             strokeColor: \"rgba(220,220,220,0.8)\",\r\n  //             highlightFill: \"rgba(220,220,220,0.75)\",\r\n  //             highlightStroke: \"rgba(220,220,220,1)\",\r\n  //             borderWidth: 4,\r\n  //           },\r\n  //         ],\r\n  //       });\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     });\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   chart3();\r\n  // }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>CHART - 3</h1>\r\n      <div>\r\n        <Pie\r\n          data={props.chartData3}\r\n          options={{\r\n            responsive: true,\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    autoSkip: true,\r\n                    maxTicksLimit: 10,\r\n                    beginAtZero: true,\r\n                  },\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart3;\r\n","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction Buttons(props) {\r\n  function refreshPage() {\r\n    window.location.reload(false);\r\n  }\r\n  return (\r\n    <>\r\n      {/* <button \r\n        style={{ marginLeft:40, position:\"relative\", top:-20, cursor:\"pointer\" }}\r\n        onClick={props.onClick}\r\n      >\r\n        Activity Dashboard Details - ON CliCk\r\n      </button> */}\r\n      <Button \r\n        style={{\r\n          marginLeft: 40,\r\n          position: \"relative\",\r\n          top: -20,\r\n          left: -30,\r\n          cursor: \"pointer\",\r\n        }}\r\n        onClick={refreshPage}\r\n        variant=\"contained\"\r\n      >\r\n        Refresh\r\n      </Button >\r\n    </>\r\n  );\r\n}\r\nexport default Buttons;\r\n","import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport data1 from \"./Data.json\";\r\n\r\nconst NewChart = (props) => {\r\n  // const [chartData, setChartData] = useState({});\r\n  // const [startdate, setstartdate] = useState([]);\r\n\r\n  // let url = \"https://sigviewauth.sigmoid.io/api/v1/getData\";\r\n\r\n  data1.chartObject.requestParam.dateRange.startDate = \"1493577000000\";\r\n  data1.chartObject.requestParam.dateRange.endDate = \"1496255400000\";\r\n  console.log(data1.chartObject.requestParam.dateRange.startDate);\r\n\r\n  // const requestOptions = {\r\n  //   method: \"POST\",\r\n  //   headers: {\r\n  //     \"Content-Type\": \"application/json\",\r\n  //     accept: \"application/json\",\r\n  //     \"x-auth-token\":\r\n  //       \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLWVQYnBBbHk2VDVEWWNGYjh4WWtOYmJ4ZExRMjV5eUVMeXdmaGpSYkJxOWFjeE5wRTVuR2FmMnI4ZGJ4N1lWOEVXZm1qbmNZTmZxN3pCbEp0RzArMnBSc1d0N1BoSDlPTjZyTVZUSitMMXlLT3V3PT0iLCJpc3MiOiJyYWh1bGt1bWFyIiwiZXhwIjoxNjExMzkwMTg5LCJpYXQiOjE2MTEzMDM3ODksImp0aSI6IjIzM2FiZThhYTE5ZThmZGI5MmE2OGY3MmQyZGMxZThkYWRhNDA1YmZkMjgwMTQ2MDhhMTQ1YWM4MjdkZjcyZTdkZDgxODdiZTM4NWQ2MjFiMjhjN2EwN2I3NWY0ZGU2NDg4ZjE4MjY4YjJkZjI0ZGI3MDhjMjVjZWZhM2I2ZmE0ZWIyNWM2MjdhZGQ0ODcxZDBkMGE2NTBlNzc2ZDljNzgzNTJkNzNlMmYxNmYxY2VmYjhhMzM3Y2Y1NTFiNDM2ZGU4NGRhNjNhNzJjMWJlY2VhNGY4MTE5MDZiZjg4YTNkMGE0MzAxN2NmMmZmZGFmOTE5YjE3ZjIyNjQxOWIyYjMifQ.UaYHdG4PEj9Y9KDMsMZFEvpy8s2TxtREzGiwrGL5GPs\",\r\n  //   },\r\n\r\n  //   body: JSON.stringify(data1),\r\n  // };\r\n  // const a = []\r\n\r\n  // fetch(url, requestOptions)\r\n  //   .then((response) => response.json())\r\n  //   // .then((datas) =>  setpublish({ datas }));\r\n  //   .then((data) => {a.push(data.result.data)\r\n  //   console.log(data)\r\n  //   for (const dataObj of data.result.data) {\r\n  //     identity.push(dataObj.publisherId)\r\n  //     no.push(parseInt(dataObj.impressions_offered))\r\n  // }}\r\n  // );\r\n\r\n  // const chart = () => {\r\n  //   let publisherId = [];\r\n  //   let impressions_offered = [];\r\n\r\n  //   fetch(\"https://sigviewauth.sigmoid.io/api/v1/getData\", requestOptions)\r\n  //     .then((response) => response.json())\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       setstartdate(new Date());\r\n  //       console.log(startdate);\r\n\r\n  //       for (const dataObj of res.result.data) {\r\n  //         publisherId.push(dataObj.publisherId);\r\n  //         impressions_offered.push(parseInt(dataObj.impressions_offered));\r\n  //       }\r\n  //       setChartData({\r\n  //         labels: publisherId,\r\n  //         datasets: [\r\n  //           {\r\n  //             label: \"Data Analysis\",\r\n  //             data: impressions_offered,\r\n  //             backgroundColor: [\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //               \"blue\",\r\n  //               \"green\",\r\n  //               \"blue\",\r\n  //               \"red\",\r\n  //               \"blue\",\r\n  //             ],\r\n  //             fillColor: \"rgba(220,220,220,0.5)\",\r\n  //             strokeColor: \"rgba(220,220,220,0.8)\",\r\n  //             highlightFill: \"rgba(220,220,220,0.75)\",\r\n  //             highlightStroke: \"rgba(220,220,220,1)\",\r\n  //             borderWidth: 4,\r\n  //           },\r\n  //         ],\r\n  //       });\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     });\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   chart();\r\n  // }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>CHART - 1</h1>\r\n      <div>\r\n        <Bar\r\n          data={props.chartData1}\r\n          options={{\r\n            responsive: true,\r\n\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    autoSkip: true,\r\n                    maxTicksLimit: 10,\r\n                    beginAtZero: true,\r\n                  },\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewChart;\r\n","import \"./App.css\";\r\nimport DatePicker from \"./DatePicker\";\r\nimport Chart2 from \"./Chart2\";\r\nimport Chart3 from \"./Chart3\";\r\nimport Buttons from \"./Buttons\";\r\nimport NewChart from \"./NewChart\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction App() {\r\n  const [chartData1, setChartData1] = useState({});\r\n  const [newstartdate, setnewstartdate] = useState(\"\");\r\n  const [newstartdate2, setnewstartdate2] = useState(\"\");\r\n  const [newstartdate3, setnewstartdate3] = useState(\"\");\r\n  const [newenddate, setnewenddate] = useState(\"\");\r\n  const [newenddate2, setnewenddate2] = useState(\"\");\r\n  const [newenddate3, setnewenddate3] = useState(\"\");\r\n  const [chartData2, setChartData2] = useState({});\r\n  const [chartData3, setChartData3] = useState({});\r\n\r\n  let bgc = [\r\n    \"red\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"blue\",\r\n    \"green\",\r\n    \"blue\",\r\n    \"red\",\r\n    \"blue\",\r\n  ];\r\n\r\n  // first chart dynamic\r\n\r\n  const chart1 = () => {\r\n    let chart1body = [\r\n      {\r\n        _id: \"dashboard1516252439345\",\r\n        emailId: \"candidate@sigmoid.com\",\r\n        orgViewReq: { organization: \"DemoTest\", view: \"Auction\" },\r\n        chartObject: {\r\n          metadata: {\r\n            title: \"chartobject:1516252439345\",\r\n            img_thumbnail: \"../img/chart.png\",\r\n            chartType: \"table\",\r\n            dataLimit: 50,\r\n          },\r\n          requestParam: {\r\n            granularity: \"hour\",\r\n            timeZone: { name: \"UTC (+00:00)\", location: \"UTC\" },\r\n            dateRange: {\r\n              startDate: newstartdate.toString(),\r\n              endDate: newenddate.toString(),\r\n            },\r\n            xAxis: [\"D044\"],\r\n            yAxis: [\"M002\"],\r\n            approxCountDistinct: [],\r\n            specialCalculation: [],\r\n            filter: [],\r\n            orderBy: { metricOrdByList: [{ id: \"M002\", desc: true }] },\r\n            percentCalList: [],\r\n          },\r\n        },\r\n      },\r\n    ];\r\n\r\n    let requestOptions = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        accept: \"application/json\",\r\n        \"x-auth-token\":\r\n          \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLXlMSVFIcTBIVTMzM2NRQk1oTVwvT2psZTlyeUp4cG1hSjJYaTNDNHp2T2dlSGk2QnhRUGRCSnRGVEErRFFqdVhHT2RJbUlvSkZHQk5iUjQzRGRFVnc3OHM2bUdMVkphNTFlcnoySnpnRlJBYzZuZz09IiwiaXNzIjoicmFodWxrdW1hciIsImV4cCI6MTYxMjY5Mjc2NSwiaWF0IjoxNjEyNjA2MzY1LCJqdGkiOiJjZjQzMDBhZTZkMmI2MGZiODY0ODY1N2JmYzIyMWU2Y2JkMjkyNzE2ZThiYTc4M2JlNDFmYTY4OGNhM2VkNjAwYjhlZjk2YWY5M2NjMzM2MWY0NGFjOTZjMzFkNzliMTMwY2E2YzI4OGJhMGRjYzczZDBkODliMmUxMDE3NmM2ZmQ5NjJjOWVjMjY2Yjg2NzE4ZTZiNGVkOGJmYjQ1N2NhMDQ5MzliYWJkNzc0YjY4M2U0M2M0ODBlOTU0MjU3NWQyYWNkODZhZWY5ZGVjNDY0YjgzMjA2ZWMzZTBiOTgwZDFlZmQ5ZTY2Y2Y2NjJiMTBmMGZlM2U3MDBlZGUyMTFiIn0.X6RcT5jaegTmjOYAxMoJpGBbtBRRsH3FQipquU1JiSk\",\r\n      },\r\n\r\n      body: JSON.stringify(chart1body[0]),\r\n    };\r\n\r\n    let publisherId = [];\r\n    let impressions_offered = [];\r\n\r\n    fetch(\"https://sigviewauth.sigmoid.io/api/v1/getData\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        console.log(res);\r\n        setChartData1(new Date());\r\n        // console.log(startdate);\r\n\r\n        for (const dataObj of res.result.data) {\r\n          publisherId.push(dataObj.publisherId);\r\n          impressions_offered.push(parseInt(dataObj.impressions_offered));\r\n        }\r\n        setChartData1({\r\n          labels: publisherId,\r\n          datasets: [\r\n            {\r\n              label: \"Data Analysis\",\r\n              data: impressions_offered,\r\n              backgroundColor: bgc,\r\n              fillColor: \"rgba(220,220,220,0.5)\",\r\n              strokeColor: \"rgba(220,220,220,0.8)\",\r\n              highlightFill: \"rgba(220,220,220,0.75)\",\r\n              highlightStroke: \"rgba(220,220,220,1)\",\r\n              borderWidth: 4,\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  // second chart dynamic\r\n\r\n  const chart4 = () => {\r\n    let chart1body = [\r\n      {\r\n        _id: \"dashboard1516252235693\",\r\n        emailId: \"candidate@sigmoid.com\",\r\n        orgViewReq: { organization: \"DemoTest\", view: \"Auction\" },\r\n        chartObject: {\r\n          metadata: {\r\n            title: \"chartobject:1516252235693\",\r\n            img_thumbnail: \"../img/chart.png\",\r\n            chartType: \"table\",\r\n            dataLimit: 50,\r\n          },\r\n          requestParam: {\r\n            granularity: \"hour\",\r\n            timeZone: { name: \"UTC (+00:00)\", location: \"UTC\" },\r\n            dateRange: {\r\n              startDate: newstartdate2.toString(),\r\n              endDate: newenddate2.toString(),\r\n            },\r\n            xAxis: [\"D017\"],\r\n            yAxis: [\"M002\"],\r\n            approxCountDistinct: [],\r\n            specialCalculation: [],\r\n            filter: [],\r\n            orderBy: { metricOrdByList: [{ id: \"M002\", desc: true }] },\r\n            percentCalList: [],\r\n          },\r\n        },\r\n      },\r\n    ];\r\n\r\n    let requestOptions2 = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        accept: \"application/json\",\r\n        \"x-auth-token\":\r\n          \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLXlMSVFIcTBIVTMzM2NRQk1oTVwvT2psZTlyeUp4cG1hSjJYaTNDNHp2T2dlSGk2QnhRUGRCSnRGVEErRFFqdVhHT2RJbUlvSkZHQk5iUjQzRGRFVnc3OHM2bUdMVkphNTFlcnoySnpnRlJBYzZuZz09IiwiaXNzIjoicmFodWxrdW1hciIsImV4cCI6MTYxMjY5Mjc2NSwiaWF0IjoxNjEyNjA2MzY1LCJqdGkiOiJjZjQzMDBhZTZkMmI2MGZiODY0ODY1N2JmYzIyMWU2Y2JkMjkyNzE2ZThiYTc4M2JlNDFmYTY4OGNhM2VkNjAwYjhlZjk2YWY5M2NjMzM2MWY0NGFjOTZjMzFkNzliMTMwY2E2YzI4OGJhMGRjYzczZDBkODliMmUxMDE3NmM2ZmQ5NjJjOWVjMjY2Yjg2NzE4ZTZiNGVkOGJmYjQ1N2NhMDQ5MzliYWJkNzc0YjY4M2U0M2M0ODBlOTU0MjU3NWQyYWNkODZhZWY5ZGVjNDY0YjgzMjA2ZWMzZTBiOTgwZDFlZmQ5ZTY2Y2Y2NjJiMTBmMGZlM2U3MDBlZGUyMTFiIn0.X6RcT5jaegTmjOYAxMoJpGBbtBRRsH3FQipquU1JiSk\",\r\n      },\r\n\r\n      body: JSON.stringify(chart1body[0]),\r\n    };\r\n\r\n    let appSiteId = [];\r\n    let impressions_offered = [];\r\n\r\n    fetch(\"https://sigviewauth.sigmoid.io/api/v1/getData\", requestOptions2)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        console.log(res);\r\n        for (const dataObj of res.result.data) {\r\n          appSiteId.push(dataObj.appSiteId);\r\n          impressions_offered.push(parseInt(dataObj.impressions_offered));\r\n        }\r\n        setChartData2({\r\n          labels: appSiteId,\r\n          datasets: [\r\n            {\r\n              label: \"Data Analysis\",\r\n              data: impressions_offered,\r\n              backgroundColor: bgc,\r\n              fillColor: \"rgba(220,220,220,0.5)\",\r\n              strokeColor: \"rgba(220,220,220,0.8)\",\r\n              highlightFill: \"rgba(220,220,220,0.75)\",\r\n              highlightStroke: \"rgba(220,220,220,1)\",\r\n              borderWidth: 4,\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  // third chart dynamic\r\n\r\n  const chart3 = () => {\r\n    let chart1body = [\r\n      {\r\n        _id: \"Datastory_ChartId_1535224664111\",\r\n        emailId: \"candidate@sigmoid.com\",\r\n        orgViewReq: { organization: \"DemoTest\", view: \"Auction\" },\r\n        chartObject: {\r\n          metadata: {\r\n            title: \"\",\r\n            img_thumbnail: \"images/pie.png\",\r\n            chartType: \"pie\",\r\n            dataLimit: 500,\r\n          },\r\n          text: [],\r\n          requestParam: {\r\n            granularity: \"hour\",\r\n            timeZone: { name: \"UTC (+00:00)\", location: \"UTC\" },\r\n            dateRange: {\r\n              startDate: newstartdate3.toString(),\r\n              endDate: newenddate3.toString(),\r\n            },\r\n            xAxis: [\"D005\"],\r\n            yAxis: [],\r\n            approxCountDistinct: [],\r\n            specialCalculation: [\"CM001\"],\r\n            filter: [],\r\n            orderBy: { customMetricOrdByList: [{ id: \"CM001\", desc: true }] },\r\n            percentCalList: [{ id: \"CM001\" }],\r\n          },\r\n        },\r\n      },\r\n    ];\r\n\r\n    let requestOptions3 = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        accept: \"application/json\",\r\n        \"x-auth-token\":\r\n          \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLXlMSVFIcTBIVTMzM2NRQk1oTVwvT2psZTlyeUp4cG1hSjJYaTNDNHp2T2dlSGk2QnhRUGRCSnRGVEErRFFqdVhHT2RJbUlvSkZHQk5iUjQzRGRFVnc3OHM2bUdMVkphNTFlcnoySnpnRlJBYzZuZz09IiwiaXNzIjoicmFodWxrdW1hciIsImV4cCI6MTYxMjY5Mjc2NSwiaWF0IjoxNjEyNjA2MzY1LCJqdGkiOiJjZjQzMDBhZTZkMmI2MGZiODY0ODY1N2JmYzIyMWU2Y2JkMjkyNzE2ZThiYTc4M2JlNDFmYTY4OGNhM2VkNjAwYjhlZjk2YWY5M2NjMzM2MWY0NGFjOTZjMzFkNzliMTMwY2E2YzI4OGJhMGRjYzczZDBkODliMmUxMDE3NmM2ZmQ5NjJjOWVjMjY2Yjg2NzE4ZTZiNGVkOGJmYjQ1N2NhMDQ5MzliYWJkNzc0YjY4M2U0M2M0ODBlOTU0MjU3NWQyYWNkODZhZWY5ZGVjNDY0YjgzMjA2ZWMzZTBiOTgwZDFlZmQ5ZTY2Y2Y2NjJiMTBmMGZlM2U3MDBlZGUyMTFiIn0.X6RcT5jaegTmjOYAxMoJpGBbtBRRsH3FQipquU1JiSk\",\r\n      },\r\n\r\n      body: JSON.stringify(chart1body[0]),\r\n    };\r\n\r\n    let cm001 = [];\r\n    let CM001_percent = [];\r\n    let advertiserId = [];\r\n\r\n    fetch(\"https://sigview.sigmoid.io/api/v1/getData\", requestOptions3)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        console.log(res);\r\n        for (const dataObj of res.result.data) {\r\n          cm001.push(parseInt(dataObj.cm001));\r\n          CM001_percent.push(dataObj.CM001_percent);\r\n          advertiserId.push(dataObj.advertiserId);\r\n        }\r\n        setChartData3({\r\n          labels: advertiserId,\r\n          datasets: [\r\n            {\r\n              label: \"Data Analysis\",\r\n              data: CM001_percent,\r\n              backgroundColor: bgc,\r\n              fillColor: \"rgba(220,220,220,0.5)\",\r\n              strokeColor: \"rgba(220,220,220,0.8)\",\r\n              highlightFill: \"rgba(220,220,220,0.75)\",\r\n              highlightStroke: \"rgba(220,220,220,1)\",\r\n              borderWidth: 4,\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    chart1();\r\n    chart3();\r\n    chart4();\r\n  }, [\r\n    newstartdate,\r\n    newenddate,\r\n    newstartdate2,\r\n    newenddate2,\r\n    newstartdate3,\r\n    newenddate3,\r\n  ]);\r\n\r\n  const initdate = (startdate, enddate) => {\r\n    setnewstartdate(\r\n      Math.floor(new Date(startdate._d).getTime() / 1000.0) * 1000\r\n    );\r\n    setnewenddate(Math.floor(new Date(enddate._d).getTime() / 1000.0) * 1000);\r\n  };\r\n  const selectDateRange = (daterange) => {\r\n    // console.log(\r\n    //   \"daterange is \",\r\n    //   Math.floor(new Date(daterange.start._d).getTime() / 1000.0) * 1000\r\n    // );\r\n    // console.log(\r\n    //   \"endrange is \",\r\n    //   Math.floor(new Date(daterange.end._d).getTime() / 1000.0) * 1000\r\n    // );\r\n    if (daterange.end._d) {\r\n      setnewstartdate(\r\n        Math.floor(new Date(daterange.start._d).getTime() / 1000.0) * 1000\r\n      );\r\n      setnewenddate(\r\n        Math.floor(new Date(daterange.end._d).getTime() / 1000.0) * 1000\r\n      );\r\n      setnewstartdate2(\r\n        Math.floor(new Date(daterange.start._d).getTime() / 1000.0) * 1000\r\n      );\r\n      setnewenddate2(\r\n        Math.floor(new Date(daterange.end._d).getTime() / 1000.0) * 1000\r\n      );\r\n      setnewstartdate3(\r\n        Math.floor(new Date(daterange.start._d).getTime() / 1000.0) * 1000\r\n      );\r\n      setnewenddate3(\r\n        Math.floor(new Date(daterange.end._d).getTime() / 1000.0) * 1000\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"blocks\">\r\n        <h4>Data Analytics Application Dashboard</h4>\r\n        <div className=\"h4\">\r\n          <DatePicker selectDateRange={selectDateRange} initdate={initdate} />\r\n        </div>\r\n        <div className=\"refresh\">\r\n          <Buttons />\r\n        </div>\r\n        <NewChart chartData1={chartData1} />\r\n        <Chart2 chartData2={chartData2} />\r\n        <Chart3 chartData3={chartData3} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}